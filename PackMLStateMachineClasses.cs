/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.6.9, using .NET Server 3.3.0 template (version 0)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
** </auto-generated>
**
** Copyright (c) 2006-2023 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.8
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.8, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace http://yourorganisation.org/PackMLModel/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.8/
**
** Created: 12.07.2023
**
******************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using UnifiedAutomation.UaBase;
using UnifiedAutomation.UaServer;

namespace FIP.PackMLStateMachine
{
    #region PackMLStateModelModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.PackMLStateModelType, NamespaceUri=FIP.PackMLStateMachine.Namespaces.PackMLStateMachine)]
    public partial class PackMLStateModelModel : BaseObjectModel, IMethodDispatcher
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="PackMLStateModelModel" /> class.
        /// </summary>
        public PackMLStateModelModel() : this((PackMLStateModelModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PackMLStateModelModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public PackMLStateModelModel(PackMLStateModelModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                CurrentState = template.CurrentState;
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the CurrentState
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.PackMLStateMachine)]
        public int CurrentState
        {
            get => m_CurrentState;
            set => SetField(ref m_CurrentState, value, nameof(CurrentState));
        }
        private int m_CurrentState;


        #endregion
        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public virtual CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public virtual StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            IPackMLStateModelMethods implemention = PackMLStateModelMethods;

            if (implemention == null)
            {
                implemention = this as IPackMLStateModelMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }

            ExpandedNodeId methodDeclarationId = NodeId.ToAbsoluteNodeId(methodHandle.MethodDeclarationId, context.NamespaceUris);

            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.PackMLStateModelType_GetAvailableCommands)
            {
                int[] commands;
                StatusCode ret = implemention.GetAvailableCommands(context, this, out commands);
                if (ret.IsGood())
                {
                    outputArguments[ 0 ] = new Variant(commands);
                }
                return ret;

            }
            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.PackMLStateModelType_GetNext)
            {
                int state;
                StatusCode ret = implemention.GetNext(context, this, inputArguments[0].ToInt32(), out state);
                if (ret.IsGood())
                {
                    outputArguments[ 0 ] = new Variant(state);
                }
                return ret;

            }
            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.PackMLStateModelType_IsCommandAvailable)
            {
                bool val;
                StatusCode ret = implemention.IsCommandAvailable(context, this, inputArguments[0].ToInt32(), out val);
                if (ret.IsGood())
                {
                    outputArguments[ 0 ] = new Variant(val);
                }
                return ret;

            }
            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.PackMLStateModelType_MoveNext)
            {
                int state;
                StatusCode ret = implemention.MoveNext(context, this, inputArguments[0].ToInt32(), out state);
                if (ret.IsGood())
                {
                    outputArguments[ 0 ] = new Variant(state);
                }
                return ret;

            }
            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.PackMLStateModelType_SetState)
            {
                StatusCode ret = implemention.SetState(context, this, inputArguments[0].ToInt32());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            return StatusCodes.BadMethodInvalid;
        }

        /// <summary>
        /// Gets or sets the PackMLStateModel methods.
        /// </summary>
        /// <value>
        /// The PackMLStateModel methods.
        /// </value>
        public IPackMLStateModelMethods PackMLStateModelMethods { get; set; }
        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the PackMLStateModelModel object.
    /// </summary>
    public interface IPackMLStateModelMethods
    {
        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="commands">out: </param>
        /// <returns></returns>
        StatusCode GetAvailableCommands(
            RequestContext context,
            PackMLStateModelModel model,
            out int[] commands
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="command"></param>
        /// <param name="state">out: </param>
        /// <returns></returns>
        StatusCode GetNext(
            RequestContext context,
            PackMLStateModelModel model,
            int command,
            out int state
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="command"></param>
        /// <param name="val">out: </param>
        /// <returns></returns>
        StatusCode IsCommandAvailable(
            RequestContext context,
            PackMLStateModelModel model,
            int command,
            out bool val
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="command"></param>
        /// <param name="state">out: </param>
        /// <returns></returns>
        StatusCode MoveNext(
            RequestContext context,
            PackMLStateModelModel model,
            int command,
            out int state
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="state"></param>
        /// <returns></returns>
        StatusCode SetState(
            RequestContext context,
            PackMLStateModelModel model,
            int state
            );


    }
    #endregion


    #region UnitModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.UnitType, NamespaceUri=FIP.PackMLStateMachine.Namespaces.PackMLStateMachine)]
    public partial class UnitModel : PackMLStateModelModel, IMethodDispatcher
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="UnitModel" /> class.
        /// </summary>
        public UnitModel() : this((UnitModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UnitModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public UnitModel(UnitModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
                Dictionnaries = new Dictionnaries_FolderModel();
            }
            else
            {
                Dictionnaries = new Dictionnaries_FolderModel(template.Dictionnaries);
                MachineName = template.MachineName == null ? null : template.MachineName.Clone() as string;
            }
        }
        #endregion

        #region Nested Classes
        /// <summary>
        /// Helper class for UnitModel.Dictionnaries
        /// </summary>
        public partial class Dictionnaries_FolderModel : FolderModel
        {
            /// <remarks/>
            public Dictionnaries_FolderModel(Dictionnaries_FolderModel template = null, DummyArgument dummy = null): base(template)
            {
                if (template == null)
                {
                }
                else
                {
                    Alarms = template.Alarms == null ? null : template.Alarms.Clone() as AlarmType[];
                    Buttons = template.Buttons == null ? null : template.Buttons.Clone() as ButtonType[];
                    StackLights = template.StackLights == null ? null : template.StackLights.Clone() as StackLightType[];
                }
            }
            /// <remarks/>
            [UaInstanceDeclaration(NamespaceUri=FIP.PackMLStateMachine.Namespaces.PackMLStateMachine)]
            public AlarmType[] Alarms
            {
                get => m_Alarms;
                set => SetField(ref m_Alarms, value, nameof(Alarms));
            }
            private AlarmType[] m_Alarms;

            /// <remarks/>
            [UaInstanceDeclaration(NamespaceUri=FIP.PackMLStateMachine.Namespaces.PackMLStateMachine)]
            public ButtonType[] Buttons
            {
                get => m_Buttons;
                set => SetField(ref m_Buttons, value, nameof(Buttons));
            }
            private ButtonType[] m_Buttons;

            /// <remarks/>
            [UaInstanceDeclaration(NamespaceUri=FIP.PackMLStateMachine.Namespaces.PackMLStateMachine)]
            public StackLightType[] StackLights
            {
                get => m_StackLights;
                set => SetField(ref m_StackLights, value, nameof(StackLights));
            }
            private StackLightType[] m_StackLights;

        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Dictionnaries
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.PackMLStateMachine)]
        public Dictionnaries_FolderModel Dictionnaries { get; set; }

        /// <summary>
        /// Gets or sets the MachineName
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.PackMLStateMachine)]
        public string MachineName
        {
            get => m_MachineName;
            set => SetField(ref m_MachineName, value, nameof(MachineName));
        }
        private string m_MachineName;


        #endregion
        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public override CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public override StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            IUnitMethods implemention = PackMLStateModelMethods as IUnitMethods;

            if (implemention == null)
            {
                implemention = this as IUnitMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }

            ExpandedNodeId methodDeclarationId = NodeId.ToAbsoluteNodeId(methodHandle.MethodDeclarationId, context.NamespaceUris);

            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.UnitType_AddAlarm)
            {
                StatusCode ret = implemention.AddAlarm(context, this, inputArguments[0].GetValue<AlarmType>(new AlarmType()));
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.UnitType_AddAlarmsFromCSV)
            {
                StatusCode ret = implemention.AddAlarmsFromCSV(context, this, (inputArguments[0].IsNull) ? null : inputArguments[0].ToString(), (inputArguments[1].IsNull) ? null : inputArguments[1].ToString());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.UnitType_AddButtons)
            {
                StatusCode ret = implemention.AddButtons(context, this, inputArguments[0].GetValue<ButtonType>(new ButtonType()));
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.UnitType_AddButtonsFromCSV)
            {
                StatusCode ret = implemention.AddButtonsFromCSV(context, this, (inputArguments[0].IsNull) ? null : inputArguments[0].ToString(), (inputArguments[1].IsNull) ? null : inputArguments[1].ToString());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.UnitType_AddStackLight)
            {
                StatusCode ret = implemention.AddStackLight(context, this, inputArguments[0].GetValue<StackLightType>(new StackLightType()));
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.UnitType_AddStackLightsFromCSV)
            {
                StatusCode ret = implemention.AddStackLightsFromCSV(context, this, (inputArguments[0].IsNull) ? null : inputArguments[0].ToString(), (inputArguments[1].IsNull) ? null : inputArguments[1].ToString());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.UnitType_ExecuteProcess)
            {
                StatusCode ret = implemention.ExecuteProcess(context, this, inputArguments[0].GetValue<ProcessType>(new ProcessType()));
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.UnitType_ReadDataFromCSV)
            {
                StatusCode ret = implemention.ReadDataFromCSV(context, this, (inputArguments[0].IsNull) ? null : inputArguments[0].ToString(), (inputArguments[1].IsNull) ? null : inputArguments[1].ToString());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.UnitType_ReadDataFromDB)
            {
                StatusCode ret = implemention.ReadDataFromDB(context, this, (inputArguments[0].IsNull) ? null : inputArguments[0].ToString());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.UnitType_RemoveAlarm)
            {
                StatusCode ret = implemention.RemoveAlarm(context, this, inputArguments[0].ToInt32());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.UnitType_RemoveButton)
            {
                StatusCode ret = implemention.RemoveButton(context, this, inputArguments[0].ToInt32());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.UnitType_RemoveStackLight)
            {
                StatusCode ret = implemention.RemoveStackLight(context, this, inputArguments[0].ToInt32());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.UnitType_SafeMoveNext)
            {
                StatusCode ret = implemention.SafeMoveNext(context, this, inputArguments[0].ToInt32());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.UnitType_SaveDataToCSV)
            {
                StatusCode ret = implemention.SaveDataToCSV(context, this, (inputArguments[0].IsNull) ? null : inputArguments[0].ToString(), (inputArguments[1].IsNull) ? null : inputArguments[1].ToString());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.UnitType_SaveDataToDB)
            {
                StatusCode ret = implemention.SaveDataToDB(context, this, (inputArguments[0].IsNull) ? null : inputArguments[0].ToString());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.UnitType_SetMachineName)
            {
                StatusCode ret = implemention.SetMachineName(context, this, (inputArguments[0].IsNull) ? null : inputArguments[0].ToString());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.UnitType_TriggerAlarm)
            {
                StatusCode ret = implemention.TriggerAlarm(context, this, inputArguments[0].ToInt32());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.UnitType_TriggerButton)
            {
                StatusCode ret = implemention.TriggerButton(context, this, inputArguments[0].ToInt32());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.UnitType_TriggerStackLight)
            {
                StatusCode ret = implemention.TriggerStackLight(context, this, inputArguments[0].ToInt32());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.UnitType_UntriggerAlarm)
            {
                StatusCode ret = implemention.UntriggerAlarm(context, this, inputArguments[0].ToInt32());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == FIP.PackMLStateMachine.MethodIds.UnitType_UntriggerStackLight)
            {
                StatusCode ret = implemention.UntriggerStackLight(context, this, inputArguments[0].ToInt32());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            return base.DispatchMethod(
                context,
                methodHandle,
                inputArguments,
                inputArgumentResults,
                outputArguments);
        }

        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the UnitModel object.
    /// </summary>
    public interface IUnitMethods : IPackMLStateModelMethods
    {
        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="alarm"></param>
        /// <returns></returns>
        StatusCode AddAlarm(
            RequestContext context,
            UnitModel model,
            AlarmType alarm
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="fileName"></param>
        /// <param name="delimiter"></param>
        /// <returns></returns>
        StatusCode AddAlarmsFromCSV(
            RequestContext context,
            UnitModel model,
            string fileName,
            string delimiter
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="button"></param>
        /// <returns></returns>
        StatusCode AddButtons(
            RequestContext context,
            UnitModel model,
            ButtonType button
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="fileName"></param>
        /// <param name="delimiter"></param>
        /// <returns></returns>
        StatusCode AddButtonsFromCSV(
            RequestContext context,
            UnitModel model,
            string fileName,
            string delimiter
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="stacklight"></param>
        /// <returns></returns>
        StatusCode AddStackLight(
            RequestContext context,
            UnitModel model,
            StackLightType stacklight
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="fileName"></param>
        /// <param name="delimiter"></param>
        /// <returns></returns>
        StatusCode AddStackLightsFromCSV(
            RequestContext context,
            UnitModel model,
            string fileName,
            string delimiter
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="process"></param>
        /// <returns></returns>
        StatusCode ExecuteProcess(
            RequestContext context,
            UnitModel model,
            ProcessType process
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="csvFileName"></param>
        /// <param name="delimiter"></param>
        /// <returns></returns>
        StatusCode ReadDataFromCSV(
            RequestContext context,
            UnitModel model,
            string csvFileName,
            string delimiter
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="DBFileName"></param>
        /// <returns></returns>
        StatusCode ReadDataFromDB(
            RequestContext context,
            UnitModel model,
            string DBFileName
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="alarmID"></param>
        /// <returns></returns>
        StatusCode RemoveAlarm(
            RequestContext context,
            UnitModel model,
            int alarmID
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="buttonID"></param>
        /// <returns></returns>
        StatusCode RemoveButton(
            RequestContext context,
            UnitModel model,
            int buttonID
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="stacklightID"></param>
        /// <returns></returns>
        StatusCode RemoveStackLight(
            RequestContext context,
            UnitModel model,
            int stacklightID
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="command"></param>
        /// <returns></returns>
        StatusCode SafeMoveNext(
            RequestContext context,
            UnitModel model,
            int command
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="csvFileName"></param>
        /// <param name="delimiter"></param>
        /// <returns></returns>
        StatusCode SaveDataToCSV(
            RequestContext context,
            UnitModel model,
            string csvFileName,
            string delimiter
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="DBFileName"></param>
        /// <returns></returns>
        StatusCode SaveDataToDB(
            RequestContext context,
            UnitModel model,
            string DBFileName
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        StatusCode SetMachineName(
            RequestContext context,
            UnitModel model,
            string name
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="alarmID"></param>
        /// <returns></returns>
        StatusCode TriggerAlarm(
            RequestContext context,
            UnitModel model,
            int alarmID
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="buttonID"></param>
        /// <returns></returns>
        StatusCode TriggerButton(
            RequestContext context,
            UnitModel model,
            int buttonID
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="stacklightID"></param>
        /// <returns></returns>
        StatusCode TriggerStackLight(
            RequestContext context,
            UnitModel model,
            int stacklightID
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="alarmID"></param>
        /// <returns></returns>
        StatusCode UntriggerAlarm(
            RequestContext context,
            UnitModel model,
            int alarmID
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="stacklightID"></param>
        /// <returns></returns>
        StatusCode UntriggerStackLight(
            RequestContext context,
            UnitModel model,
            int stacklightID
            );


    }
    #endregion



}
